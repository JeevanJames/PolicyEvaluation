<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jeevan.PolicyEvaluation</name>
    </assembly>
    <members>
        <member name="T:Jeevan.PolicyEvaluation.Expression">
            <summary>
                A special token that contains a sequence of other tokens, forming a full expression.
                <br/>
                The reason why this class derives from <see cref="T:Jeevan.PolicyEvaluation.Token"/> and is not outside the hierarchy
                is because one of the tokens it can contain is a nested expression.
            </summary>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.Expression.EvaluateToken(System.Int32,Jeevan.PolicyEvaluation.PolicyEvaluatorFunc,System.Object)">
            <summary>
                Resolves the value of a policy, given its corresponding token. Only the following token
                types are supported:
                <br/>o <see cref="T:Jeevan.PolicyEvaluation.PolicyNameToken"/>: A policy that has not yet been evaluated.
                <br/>o <see cref="T:Jeevan.PolicyEvaluation.Expression"/>: A nested expression.
                <br/>o <see cref="T:Jeevan.PolicyEvaluation.ResultToken"/>: A policy whose result has already been evaluated.
                <para/>
                In case of a <see cref="T:Jeevan.PolicyEvaluation.PolicyNameToken" />, the method will look for other policy name
                tokens with the same name in the expression and nested expressions and replace them with
                the result of this policy evaluation. This way, the specific policy is only evaluated once.
            </summary>
            <param name="index">The index of the token in the <see cref="P:Jeevan.PolicyEvaluation.Expression.Tokens"/> collection.</param>
            <param name="evaluator">The policy evaluation function.</param>
            <param name="state">Optional custom state that can be passed into the evalator delegate.</param>
            <returns>The result of the expression evaluation.</returns>
            <exception cref="T:Jeevan.PolicyEvaluation.PolicyEvaluatorException">Thrown if an unexpected token is encountered.</exception>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.Expression.AssignOutcomeForPolicy(System.String,Jeevan.PolicyEvaluation.IPolicyOutcome,System.Int32)">
            <summary>
                For all <see cref="T:Jeevan.PolicyEvaluation.PolicyNameToken"/> tokens in this expression, replace with a <see cref="T:Jeevan.PolicyEvaluation.ResultToken"/>
                containing the specified <paramref name="outcome"/>.
            </summary>
        </member>
        <member name="T:Jeevan.PolicyEvaluation.ExpressionSyntaxErrorException">
            <summary>
                Exception thrown when an expression is invalid due to syntax errors.
            </summary>
        </member>
        <member name="P:Jeevan.PolicyEvaluation.ExpressionSyntaxErrorException.Position">
            <summary>
                Gets the index of the syntax error in the expression.
            </summary>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.ExpressionSyntaxErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Jeevan.PolicyEvaluation.Expression`1">
            <summary>
                A special token that contains a sequence of other tokens, forming a full expression.
                <br/>
                The reason why this class derives from <see cref="T:Jeevan.PolicyEvaluation.Token"/> and is not outside the hierarchy
                is because one of the tokens it can contain is a nested expression.
            </summary>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.Expression`1.EvaluateToken(System.Int32,Jeevan.PolicyEvaluation.PolicyEvaluatorFunc{`0},`0)">
            <summary>
                Resolves the value of a policy, given its corresponding token. Only the following token
                types are supported:
                <br/>o <see cref="T:Jeevan.PolicyEvaluation.PolicyNameToken"/>: A policy that has not yet been evaluated.
                <br/>o <see cref="T:Jeevan.PolicyEvaluation.Expression"/>: A nested expression.
                <br/>o <see cref="T:Jeevan.PolicyEvaluation.ResultToken"/>: A policy whose result has already been evaluated.
                <para/>
                In case of a <see cref="T:Jeevan.PolicyEvaluation.PolicyNameToken" />, the method will look for other policy name
                tokens with the same name in the expression and nested expressions and replace them with
                the result of this policy evaluation. This way, the specific policy is only evaluated once.
            </summary>
            <param name="index">The index of the token in the <see cref="P:Jeevan.PolicyEvaluation.Expression`1.Tokens"/> collection.</param>
            <param name="evaluator">The policy evaluation function.</param>
            <param name="state">Optional custom state that can be passed into the evalator delegate.</param>
            <returns>The result of the expression evaluation.</returns>
            <exception cref="T:Jeevan.PolicyEvaluation.PolicyEvaluatorException">Thrown if an unexpected token is encountered.</exception>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.Expression`1.AssignOutcomeForPolicy(System.String,Jeevan.PolicyEvaluation.IPolicyOutcome,System.Int32)">
            <summary>
                For all <see cref="T:Jeevan.PolicyEvaluation.PolicyNameToken"/> tokens in this expression, replace with a <see cref="T:Jeevan.PolicyEvaluation.ResultToken"/>
                containing the specified <paramref name="outcome"/>.
            </summary>
        </member>
        <member name="T:Jeevan.PolicyEvaluation.IExpressionEvaluationOutcome">
            <summary>
                The outcome of the evaluation of a logical expression of policies.
            </summary>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.PolicyEvaluator.EvaluateExpression(System.String)">
            <summary>
                Evaluates a logic policy expression and returns whether it succeeds or fails.
                <br/>
                If the final policy outcome of the expression is <see cref="F:Jeevan.PolicyEvaluation.PolicyOutcome.NotApplicable"/>,
                then the expression will be considered to have passed.
            </summary>
            <param name="expression">The logical policy expression to evaluate.</param>
            <returns>
                An instance of <see cref="T:Jeevan.PolicyEvaluation.PassOutcome"/> if the expression evaluation is satisfied, otherwise
                an <see cref="T:Jeevan.PolicyEvaluation.FailOutcome"/> instance.
                <br/>
                Use the <see cref="P:Jeevan.PolicyEvaluation.IExpressionEvaluationOutcome.IsSatisfied"/> property to check of the
                result indicates a satisfied outcome.
                <br/>
                Alternatively, you can use the <see cref="M:Jeevan.PolicyEvaluation.IExpressionEvaluationOutcome.IsNotSatisfied(System.String@,System.String@)"/>
                method to check if the expression was not satisfied and get the message related to the
                failure.
            </returns>
            <exception cref="T:Jeevan.PolicyEvaluation.PolicyEvaluatorException">
                Thrown on any error during evaluation except for syntax errors.
            </exception>
            <exception cref="T:Jeevan.PolicyEvaluation.ExpressionSyntaxErrorException">
                Thrown if the expression parsing results in a syntax error.
            </exception>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.PolicyEvaluatorException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Jeevan.PolicyEvaluation.PolicyEvaluatorException" /> class with a
                specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.PolicyEvaluatorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Jeevan.PolicyEvaluation.PolicyEvaluatorException" /> class with serialized
                data.
            </summary>
            <param name="info">
                The SerializationInfo that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
                The StreamingContext that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Jeevan.PolicyEvaluation.PolicyEvaluatorFunc">
            <summary>
                Delegate to evaluate policies.
            </summary>
            <param name="policyName">The name of the policy to evaluate.</param>
            <param name="state">
                Optional custom data that can be used to evaluate the policy.
                <br/>
                By passing this data into the delegate instead of expecting it to be accessed from outside
                the delegate's scope, we can prevent unnecessary closures.
            </param>
            <returns>The outcome of the policy evaluation.</returns>
        </member>
        <member name="P:Jeevan.PolicyEvaluation.PolicyEvaluatorOptions.PolicyNameChecker">
            <summary>
                Gets or sets a delegate that can be run during the tokenization phase to check whether
                a given policy name exists.
            </summary>
        </member>
        <member name="P:Jeevan.PolicyEvaluation.PolicyEvaluatorOptions.Logger">
            <summary>
                Gets or sets a delegate to log diagnostic details of policy evaluation.
            </summary>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.PolicyEvaluator`1.EvaluateExpression(System.String,`0)">
            <summary>
                Evaluates a logic policy expression and returns whether it succeeds or fails.
                <br/>
                If the final policy outcome of the expression is <see cref="F:Jeevan.PolicyEvaluation.PolicyOutcome.NotApplicable"/>,
                then the expression will be considered to have passed.
            </summary>
            <param name="expression">The logical policy expression to evaluate.</param>
            <param name="state">
                Optional custom data that is passed to the policy evaluation delegate and can be used to
                evaluate the policies.
            </param>
            <returns>
                An instance of <see cref="T:Jeevan.PolicyEvaluation.PassOutcome"/> if the expression evaluation is satisfied, otherwise
                an <see cref="T:Jeevan.PolicyEvaluation.FailOutcome"/> instance.
                <br/>
                Use the <see cref="P:Jeevan.PolicyEvaluation.IExpressionEvaluationOutcome.IsSatisfied"/> property to check of the
                result indicates a satisfied outcome.
                <br/>
                Alternatively, you can use the <see cref="M:Jeevan.PolicyEvaluation.IExpressionEvaluationOutcome.IsNotSatisfied(System.String@,System.String@)"/>
                method to check if the expression was not satisfied and get the message related to the
                failure.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:Jeevan.PolicyEvaluation.PolicyEvaluatorException">
                Thrown on any error during evaluation except for syntax errors.
            </exception>
            <exception cref="T:Jeevan.PolicyEvaluation.ExpressionSyntaxErrorException">
                Thrown if the expression parsing results in a syntax error.
            </exception>
        </member>
        <member name="F:Jeevan.PolicyEvaluation.PolicyOutcome.Pass">
            <summary>
                Represents a successful policy evaluation outcome.
            </summary>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.PolicyOutcome.Fail(System.String,System.String)">
            <summary>
                Returns a failed policy evaluation outcome with an optional failure message.
            </summary>
            <param name="policyName">The name of the policy that failed.</param>
            <param name="failureMessage">The optional failure message.</param>
            <returns>An <see cref="T:Jeevan.PolicyEvaluation.IPolicyOutcome"/> instance.</returns>
        </member>
        <member name="F:Jeevan.PolicyEvaluation.PolicyOutcome.NotApplicable">
            <summary>
                Represents an outcome of a policy evaluation where the policy could not be executed.
            </summary>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.PolicyOutcome.InvalidPolicyName(System.String)">
            <summary>
                Returns an outcome of a policy evaluation that indicates the policy name was not valid
                and hence could not be evaluated.
            </summary>
            <param name="policyName">The invalid policy name.</param>
            <returns>An <see cref="T:Jeevan.PolicyEvaluation.IPolicyOutcome"/> instance that indicates an invalid policy name.</returns>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.PolicyOutcome.Error(System.String)">
            <summary>
                Returns an outcome of a policy evaluation that indicates an unexpected error.
            </summary>
            <param name="errorMessage">The message describing the error.</param>
            <returns>An <see cref="T:Jeevan.PolicyEvaluation.PolicyOutcome"/> instance that indicates an unexpected error.</returns>
        </member>
        <member name="T:Jeevan.PolicyEvaluation.IPolicyOutcome">
            <summary>
                The outcome of the evaluation of a single policy.
            </summary>
        </member>
        <member name="T:Jeevan.PolicyEvaluation.PositionalToken">
            <summary>
                Any token that is created from parsing the initial expression string. Such tokens will have
                information about their position in the expression string, which will be used when throwing
                exceptions from the parsing, making it useful for debugging.
            </summary>
            <param name="Position">The zero-based index at which this token appears in the expression string.</param>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.PositionalToken.#ctor(System.Int32)">
            <summary>
                Any token that is created from parsing the initial expression string. Such tokens will have
                information about their position in the expression string, which will be used when throwing
                exceptions from the parsing, making it useful for debugging.
            </summary>
            <param name="Position">The zero-based index at which this token appears in the expression string.</param>
        </member>
        <member name="P:Jeevan.PolicyEvaluation.PositionalToken.Position">
            <summary>The zero-based index at which this token appears in the expression string.</summary>
        </member>
        <member name="T:Jeevan.PolicyEvaluation.ResultToken">
            <summary>
                A special token that holds the result of evaluating a policy from a <see cref="T:Jeevan.PolicyEvaluation.PolicyNameToken"/>
                token.
            </summary>
            <param name="Outcome">The result of the policy evaluation.</param>
        </member>
        <member name="M:Jeevan.PolicyEvaluation.ResultToken.#ctor(Jeevan.PolicyEvaluation.IPolicyOutcome)">
            <summary>
                A special token that holds the result of evaluating a policy from a <see cref="T:Jeevan.PolicyEvaluation.PolicyNameToken"/>
                token.
            </summary>
            <param name="Outcome">The result of the policy evaluation.</param>
        </member>
        <member name="P:Jeevan.PolicyEvaluation.ResultToken.Outcome">
            <summary>The result of the policy evaluation.</summary>
        </member>
    </members>
</doc>
